******************************************************************************************
tag = ist
taglocation = (?<=gunes)(.*)(?=ppp)
--> gunes ile ppp arasÄ±nda tag'i yani ist yi ara
in postgre --> syslogtag =	(select (regexp_matches(new.logdata,ls.taglocation))[1]
******************************************************************************************

ip_address : 192.252.001.010
unique_identifier : customname
custom_name : nginxForIstiklal
device_type : CUSTOM
log_source_name : ZekeriyaIstiklal
markid : 0
modelid : 0
deviceverid : 0
oid : /8000
before_tag : past
tag : GUNES
after_tag : ftr
monitor_profile : 3
parser_profile : 0
location_profile : 0
ingestion_profile : 0
monitor_profile_name : HTTP request
monitor_profile_type : HTTP
snmp_profile : 0
snmp_version : v2c
snmp_profile_name : naginxHTTPsi
community_string : ***
v3_user_name : EMPTY
v3_auth_protocol : MD5
v3_auth_password : EMPTY
v3_privacy_protocol : DES
v3_privacy_password : EMPTY

******************************************************************************************


import jpype as jp
cpopt="/usr/local/atiba/AtibaSnmpController/AtibaSnmpController-1.0.jar"
jp.startJVM(jp.getDefaultJVMPath(), "-ea", "-Djava.class.path=%s" % cpopt)
SampleClass = jp.JClass("com.atiba.atibasnmpcontroller.AtibaSnmpController")
jp.java.lang.System.out.println(SampleClass)
class com.atiba.atibasnmpcontroller.AtibaSnmpController
list = SampleClass().fillDevice()
jp.java.lang.System.out.println(list)
-->[]
SampleClass().sss()


-->
lic geldi....
Garbage collector called
Object garbage collected : com.atiba.atibasnmpcontroller.AtibaSnmpController@1feddc66
Garbage collector called
Object garbage collected : com.atiba.atibasnmpcontroller.AtibaSnmpController@112a31eb
>>> Running task geldi
MACS=192.168.1.250 id=4
192.168.1.250 event:org.snmp4j.event.ResponseEvent[source=org.snmp4j.Snmp@12931e1d]error=null
192.168.1.250- response:RESPONSE[requestID=1244516686, errorStatus=Success(0), errorIndex=0, VBS[1.3.6 = noSuchObject; 1.3.6.1.2.1.1.2.0 = 1.3.6.1.4.1.6876.4.1; 1.3.6.1.2.1.1.1.0 = VMware ESXi 5.1.0 build-799733 VMware, Inc. x86_64; 1.3.6.1.2.1.1.5.0 = localhost.k3nc.com]]
ip=192.168.1.250 marka=null entprs=6876
ip2=192.168.1.250 marka=null entprs=6876 modelid=2094
ip3=192.168.1.250 marka=null entprs=6876 modelid=2094
192.168.1.250 - virtualDeviceOid=
eventnull
ip=192.168.1.250vercode=VMware ESXi 5.1.0 build-799733 VMware, Inc. x86_64 verid=null
eventnull
ip=192.168.1.250  macnew=44:8a:5b:22:12:c3 macold=44:8a:5b:22:12:c3
response listener thread id: 12



-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
import jpype as jp
cpopt="/usr/local/atiba/AtibaSnmpController/AtibaSnmpController-1.0.jar"
jp.startJVM(jp.getDefaultJVMPath(), "-ea", "-Djava.class.path=%s" % cpopt)
SampleClass = jp.JClass("com.atiba.atibasnmpcontroller.LicDecrypt")
SampleClass().getAes256DecodedLic("njCeD4NVxvpYHf2krrGXXhhKzGl9IhJEwStLVJjRdgIShJxl4krVsEKJwjxw4prAWw1mmg9BwIfYer+9IlvhJKbHeIhjjZE6od2+4mS6+v8L0a9AXuwgNFos8vZVEgYT")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------







-------------------------------------------------------------------snmp.py--------------------------------------------------------------------------------------------
# snmpwalk -v2c -c pub 192.168.0.100 1.3.6.1.2.1.17.7.1.2.2.1.2

import os, sys
import socket
import random
from struct import pack, unpack
from datetime import datetime as dt
from pysnmp.entity.rfc3413.oneliner import cmdgen
from pysnmp.hlapi import *
from pysnmp.proto.rfc1902 import Integer, IpAddress, OctetString
# import netsnmp
# from pysnmp.hlapi.v1arch import *
from pysnmp.entity import engine, config
from pysnmp.entity.rfc3413 import cmdrsp, context
from pysnmp.carrier.asyncore.dgram import udp
from pysnmp.proto import rfc1902


def deneme1():
    ip = '192.168.1.1'
    community = 'pub'
    value = (1, 3, 6, 1, 2, 1, 17, 7, 1, 2, 2, 1, 2)

    generator = cmdgen.CommandGenerator()
    comm_data = cmdgen.CommunityData('server', community, 1)  # 1 means version SNMP v2c
    transport = cmdgen.UdpTransportTarget((ip, 161))

    real_fun = getattr(generator, 'getCmd')
    res = (errorIndication, errorStatus, errorIndex, varBinds)\
        = real_fun(comm_data, transport, value)

    if errorIndication is not None or errorStatus is True:
        print("Error: %s %s %s %s" % res)
    else:
        print("%s" % varBinds)


# def deneme2():
#     g = getCmd(snmpDispatcher(), CommunityData('public'), UdpTransportTarget(('demo.snmplabs.com', 161)), ObjectType(ObjectIdentity('SNMPv2-MIB', 'sysDescr', 0)))
#     next(g)


# def getmac():
#     oid = netsnmp.VarList(netsnmp.Varbind('.1.3.6.1.2.1.17.7.1.2.2.1.2'))
#     res = netsnmp.snmpgetbulk(oid, Version=2, DestHost='192.168.0.100', Community='pub')
#     return res

"""
# from pysnmp docs.
snmpEngine = engine.SnmpEngine(rfc1902.OctetString(hexValue='8000000004030201'))
config.addTransport(
    snmpEngine,
    udp.DOMAIN_NAME,
    udp.UdpTransport().openServerMode(('127.0.0.1', 161))
)
snmpContext = context.SnmpContext(snmpEngine)

cmdrsp.GetCommandResponder(snmpEngine, snmpContext)
cmdrsp.SetCommandResponder(snmpEngine, snmpContext)
cmdrsp.NextCommandResponder(snmpEngine, snmpContext)
cmdrsp.BulkCommandResponder(snmpEngine, snmpContext)

snmpEngine.transportDispatcher.jobStarted(1)

try:
    snmpEngine.transportDispatcher.runDispatcher()

finally:
    snmpEngine.transportDispatcher.closeDispatcher()
"""
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------




