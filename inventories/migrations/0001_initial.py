# Generated by Django 3.1.3 on 2020-11-12 08:03

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DeviceConfigProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('configcode', models.CharField(blank=True, max_length=300, null=True, verbose_name='Device Configuration Code')),
                ('configname', models.CharField(blank=True, max_length=300, null=True, verbose_name='Device Configuration Name')),
                ('configtxt', models.CharField(blank=True, max_length=500, null=True, verbose_name='Device Configuration Text')),
            ],
            options={
                'db_table': 'deviceconfigprofile',
                'ordering': ['configcode'],
            },
        ),
        migrations.CreateModel(
            name='DeviceMark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('markname', models.CharField(blank=True, max_length=300, null=True, verbose_name="Device's Trademark(Brand) Name")),
                ('markfilename', models.CharField(blank=True, max_length=300, null=True, verbose_name="Device's Trademark(Brand) File Name")),
                ('markversion', models.CharField(blank=True, max_length=300, null=True, verbose_name="Device's Brand Version Information")),
                ('marksubversion', models.IntegerField(blank=True, null=True, verbose_name="Device's Brand Subversion Information Id")),
            ],
            options={
                'db_table': 'devicemark',
                'ordering': ['markname'],
            },
        ),
        migrations.CreateModel(
            name='DeviceModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modelname', models.CharField(blank=True, max_length=300, null=True, verbose_name='Device Model Name')),
                ('devicetypecode', models.CharField(blank=True, max_length=300, null=True, verbose_name='Device Type Code')),
                ('fielddefcode', models.IntegerField(blank=True, null=True, verbose_name='Device Definition Code')),
                ('modelcode', models.CharField(blank=True, max_length=300, null=True, verbose_name='Device Model Code')),
                ('devicetype', models.CharField(blank=True, max_length=300, null=True, verbose_name='Device Type')),
                ('versionparseid', models.IntegerField(blank=True, null=True, verbose_name="Device's Version Parse ID")),
                ('brand', models.ForeignKey(db_column='devicemarkid', db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='models', to='inventories.devicemark', verbose_name='Device TradeMark8Brand) Info')),
            ],
            options={
                'db_table': 'devicemodel',
                'ordering': ['modelname', 'devicetype'],
            },
        ),
        migrations.CreateModel(
            name='DevicePasswordProfiles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passprofilecode', models.TextField(blank=True, null=True, verbose_name='Device Password Profile Code')),
                ('passprofilename', models.TextField(blank=True, null=True, verbose_name='Device Password Profile Name')),
                ('communitystring', models.TextField(blank=True, null=True, verbose_name='Device Password Community String')),
                ('snmpv3user', models.TextField(blank=True, null=True, verbose_name='Device SNMP V3 User')),
                ('snmpv3authpass', models.TextField(blank=True, null=True, verbose_name='Device SNMP V3 Authorization Pass')),
                ('snmpv3authprotocol', models.TextField(blank=True, null=True, verbose_name='Device SNMP V3 Authorization Protocol')),
                ('snmpv3privacypass', models.TextField(blank=True, null=True, verbose_name='Device SNMP V3 Authorization Privacy Pass')),
                ('snmpv3privacyprotocol', models.TextField(blank=True, null=True, verbose_name='Device SNMP V3 Authorization Privacy Protocol')),
                ('telnetsshuser', models.TextField(blank=True, null=True, verbose_name='Device Telnet SSH User')),
                ('telnetsshpass', models.TextField(blank=True, null=True, verbose_name='Device Telnet SSH Password')),
                ('enablepass', models.TextField(blank=True, null=True, verbose_name='Device Enable Password')),
            ],
            options={
                'db_table': 'devicepasswordprofiles',
                'ordering': ['passprofilecode'],
            },
        ),
        migrations.CreateModel(
            name='DeviceProfileGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parseprofileid', models.IntegerField(blank=True, null=True, verbose_name='Device Profile Parse Profile Id')),
                ('groupcode', models.CharField(blank=True, max_length=300, null=True, verbose_name='Device Profile Location Group Code')),
                ('groupname', models.CharField(blank=True, max_length=300, null=True, verbose_name='Device Profile Location Group Name')),
                ('parsestatus', models.BooleanField(blank=True, default=False, null=True, verbose_name='Device Profile Parse Status')),
                ('configProfile', models.ForeignKey(db_column='confprofileid', db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='deviceProfile', to='inventories.deviceconfigprofile', verbose_name='Device Profile Configuration Info')),
            ],
            options={
                'db_table': 'deviceprofilegroups',
                'ordering': ['groupname', 'locationGroup', 'location'],
            },
        ),
        migrations.CreateModel(
            name='DeviceVersions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('versioncode', models.CharField(blank=True, max_length=300, null=True, verbose_name='Device Version Code')),
                ('parsedversionname', models.CharField(blank=True, max_length=300, null=True, verbose_name="Device's Parsed Version Name")),
                ('devicetype', models.CharField(blank=True, max_length=300, null=True, verbose_name='Device Type')),
                ('parseformulcode', models.IntegerField(blank=True, null=True, verbose_name='Parse Formula Code')),
            ],
            options={
                'db_table': 'deviceversions',
                'ordering': ['versioncode', 'devicetype'],
            },
        ),
        migrations.CreateModel(
            name='DevLocationGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locationgroupcode', models.CharField(blank=True, max_length=300, null=True, verbose_name='Location Group Code')),
                ('locationgroupname', models.CharField(blank=True, max_length=300, null=True, verbose_name='Location Group Name')),
            ],
            options={
                'db_table': 'devlocationgroup',
                'ordering': ['locationgroupcode'],
            },
        ),
        migrations.CreateModel(
            name='VersionConfigs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('configcode', models.CharField(blank=True, max_length=300, null=True, verbose_name='Version Configuration Code')),
                ('configtxt', models.CharField(blank=True, max_length=500, null=True, verbose_name='Version Configuration Text')),
            ],
            options={
                'db_table': 'versionconfigs',
                'ordering': ['configcode'],
            },
        ),
        migrations.CreateModel(
            name='NetworkDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('devstatus', models.CharField(blank=True, max_length=40, null=True, verbose_name='Device Status')),
                ('devicename', models.CharField(blank=True, default='noNamedDevice', max_length=300, verbose_name='Device Name')),
                ('deviceip', models.CharField(blank=True, max_length=300, null=True, verbose_name='Device Ip Address')),
                ('devicenote', models.CharField(blank=True, max_length=300, null=True, verbose_name='Device Note')),
                ('manualyadded', models.BooleanField(blank=True, null=True, verbose_name='Is Device Added Manually?')),
                ('creationdate', models.DateTimeField(blank=True, null=True, verbose_name='Exact Creation Date and Time of Device')),
                ('updatedate', models.DateTimeField(blank=True, null=True, verbose_name='Exact Update Date and Time of Device')),
                ('snmpstatus', models.BooleanField(blank=True, null=True, verbose_name='SNMP Status of Device')),
                ('communitystring', models.CharField(blank=True, max_length=300, null=True, verbose_name='Device Community Description')),
                ('snmpv3user', models.CharField(blank=True, max_length=300, null=True, verbose_name='SNMP V3 User')),
                ('snmpv3authpass', models.CharField(blank=True, max_length=300, null=True, verbose_name='SNMP V3 Authorization Pass')),
                ('snmpv3authprotocol', models.CharField(blank=True, max_length=300, null=True, verbose_name='SNMP V3 Authorization Protocol')),
                ('snmpv3privacypass', models.CharField(blank=True, max_length=300, null=True, verbose_name='SNMP V3 Privacy Pass')),
                ('snmpv3privacyprotocol', models.CharField(blank=True, max_length=300, null=True, verbose_name='SNMP V3 Privacy Protocol')),
                ('telnetsshuser', models.CharField(blank=True, max_length=300, null=True, verbose_name='Telnet SSH User')),
                ('telnetsshpass', models.CharField(blank=True, max_length=300, null=True, verbose_name='Telnet SSH Pass')),
                ('enablepass', models.CharField(blank=True, max_length=300, null=True, verbose_name='Enable Pass')),
                ('telnetstatus', models.BooleanField(blank=True, null=True, verbose_name='Device Telnet Status')),
                ('sshstatus', models.BooleanField(blank=True, null=True, verbose_name='Device SSH Status')),
                ('macaddress', models.CharField(blank=True, max_length=300, null=True, verbose_name='Device MAC Address')),
                ('scanstatus', models.IntegerField(blank=True, null=True, verbose_name='Device Scan Status')),
                ('modeltype', models.IntegerField(blank=True, null=True, verbose_name='Device Model Type')),
                ('orderpval', models.IntegerField(blank=True, null=True, verbose_name='Device Order P Value')),
                ('orderdval', models.IntegerField(blank=True, null=True, verbose_name='Device Order D Value')),
                ('orderqval', models.IntegerField(blank=True, null=True, verbose_name='Device Order Q Value')),
                ('lastlogtime', models.DateTimeField(blank=True, null=True, verbose_name="Exact Time of Device's Last Log")),
                ('connectedmac', models.CharField(blank=True, max_length=300, null=True, verbose_name='Connected MAC Address')),
                ('virtualdeviceip', models.CharField(blank=True, max_length=300, null=True, verbose_name='Ip of Virtual Device')),
                ('snmpversion', models.CharField(blank=True, max_length=300, null=True, verbose_name='SNMP Version Information')),
                ('brand', models.ForeignKey(db_column='markid', db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='devices', to='inventories.devicemark', verbose_name='Device TradeMark(Brand) Info')),
                ('brandModel', models.ForeignKey(db_column='modelid', db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='devices', to='inventories.devicemodel', verbose_name='Device Model Info')),
                ('profileGroup', models.ForeignKey(db_column='profilegroupid', db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='devices', to='inventories.deviceprofilegroups', verbose_name='Device Profile Group')),
                ('version', models.ForeignKey(db_column='deviceverid', db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='devices', to='inventories.deviceversions', verbose_name='Device Version Info')),
            ],
            options={
                'db_table': 'networkdevice',
                'ordering': ['devstatus', 'lastlogtime', 'updatedate'],
            },
        ),
        migrations.CreateModel(
            name='DevLocations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locationcode', models.TextField(blank=True, null=True, verbose_name='Location Code')),
                ('locationname', models.TextField(blank=True, null=True, verbose_name='Location Name')),
                ('locationGroup', models.ForeignKey(db_column='locationgroupid', db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='inventories.devlocationgroup', verbose_name='Location Group')),
            ],
            options={
                'db_table': 'devlocations',
                'ordering': ['locationcode'],
            },
        ),
        migrations.AddField(
            model_name='deviceversions',
            name='config',
            field=models.ForeignKey(db_column='configid', db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='deviceversion', to='inventories.versionconfigs', verbose_name='Device Configuration'),
        ),
        migrations.AddField(
            model_name='deviceprofilegroups',
            name='location',
            field=models.ForeignKey(db_column='locationid', db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='deviceProfile', to='inventories.devlocations', verbose_name='Device Profile Locations'),
        ),
        migrations.AddField(
            model_name='deviceprofilegroups',
            name='locationGroup',
            field=models.ForeignKey(db_column='locationgroupid', db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='deviceProfile', to='inventories.devlocationgroup', verbose_name='Device Profile Location Group'),
        ),
        migrations.AddField(
            model_name='deviceprofilegroups',
            name='passProfile',
            field=models.ForeignKey(db_column='passprofileid', db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='deviceProfile', to='inventories.devicepasswordprofiles', verbose_name='Device Password Profile'),
        ),
    ]
