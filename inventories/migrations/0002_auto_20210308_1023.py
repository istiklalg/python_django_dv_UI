# Generated by Django 3.1.4 on 2021-03-08 10:23

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.manager


class Migration(migrations.Migration):

    dependencies = [
        ('inventories', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Anomalies',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uniqueid', models.CharField(blank=True, max_length=40, null=True)),
                ('deviceip', models.CharField(blank=True, max_length=40, null=True)),
                ('logdefcode', models.IntegerField(blank=True, null=True)),
                ('logcode', models.TextField(blank=True, null=True)),
                ('anomalytype', models.IntegerField(blank=True, null=True)),
                ('credate', models.DateTimeField(blank=True, null=True)),
                ('logdatestart', models.DateTimeField(blank=True, null=True)),
                ('logdateend', models.DateTimeField(blank=True, null=True)),
                ('logid', models.BigIntegerField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=3, null=True, verbose_name='Anomaly Status')),
                ('logevent', models.TextField(blank=True, null=True)),
                ('anomalycount', models.IntegerField(blank=True, null=True, verbose_name='Count of Anomalies')),
                ('logids', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), size=None)),
                ('prediction', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('lowerbound', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('upperbound', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('modeltype', models.IntegerField(blank=True, null=True)),
                ('anomalyscore', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('servauthtype', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'anomalies',
                'ordering': ['-logdateend', '-id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AnomaliesTemp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credate', models.DateTimeField(blank=True, null=True)),
                ('uniqueid', models.TextField(blank=True, null=True)),
                ('logdefcode', models.IntegerField(blank=True, null=True)),
                ('logcode', models.TextField(blank=True, null=True)),
                ('logid', models.BigIntegerField(blank=True, null=True)),
                ('deviceip', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'anomaliestemp',
                'managed': False,
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='AnomalyAbnormalLogs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uniqueid', models.TextField(blank=True, null=True)),
                ('logcode', models.TextField(blank=True, null=True)),
                ('anomalytype', models.IntegerField(blank=True, null=True)),
                ('credate', models.DateTimeField(blank=True, null=True)),
                ('logevents', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), size=None)),
                ('logcredate', models.DateTimeField(blank=True, null=True)),
                ('logstartdate', models.DateTimeField(blank=True, null=True)),
                ('logenddate', models.DateTimeField(blank=True, null=True)),
                ('analyzedstatus', models.IntegerField(blank=True, null=True)),
                ('logtimeseries', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), size=None)),
                ('dateseries', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(blank=True, null=True), size=None)),
                ('intervalval', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'anomalyabnormallogs',
                'ordering': ['-logcredate'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AnomalyLogs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deviceip', models.TextField(blank=True, null=True)),
                ('uniqueid', models.TextField(blank=True, null=True)),
                ('logcode', models.TextField(blank=True, null=True)),
                ('logid', models.BigIntegerField(blank=True, null=True)),
                ('credate', models.DateTimeField(blank=True, null=True)),
                ('anomalytype', models.IntegerField(blank=True, null=True)),
                ('logevent', models.TextField(blank=True, null=True)),
                ('logcredate', models.DateTimeField(blank=True, null=True)),
                ('analyzedstatus', models.IntegerField(blank=True, null=True)),
                ('logtimeseries', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), size=None)),
                ('dateseries', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(blank=True, null=True), size=None)),
                ('logparams', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), size=None)),
                ('causetimeseries', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), size=None)),
                ('logstartdate', models.DateTimeField(blank=True, null=True)),
                ('logenddate', models.DateTimeField(blank=True, null=True)),
                ('logtimes', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(blank=True, null=True), size=None)),
                ('paramvariable', models.TextField(blank=True, null=True)),
                ('paramvalue', models.TextField(blank=True, null=True)),
                ('logdefs', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), size=None)),
                ('logeventstruct', models.TextField(blank=True, null=True)),
                ('noresolve', models.IntegerField(blank=True, null=True)),
                ('aioutput', models.BooleanField(blank=True, null=True)),
                ('aistatus', models.IntegerField(blank=True, null=True)),
                ('isshow', models.BooleanField(blank=True, null=True)),
                ('ttr', models.DateTimeField(blank=True, null=True)),
                ('aiconfidence', models.FloatField(blank=True, null=True)),
                ('aimetricscore', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'anomalylogs',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AnomalyLogsDetails',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('scoredeviceip', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('scorelocgroup', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('scoreeventsimilar', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('scoreparameters', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('scorecredate', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('scoretimeseries', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('subtimeseries', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), size=None)),
                ('scorelast', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('grangerpval', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('causeeffect', models.TextField(blank=True, null=True, verbose_name='Cause Effect')),
                ('causetimeseries', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), size=None)),
                ('relatedparameters', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), size=None)),
                ('userfeedback', models.BooleanField(blank=True, null=True, verbose_name='User Feedback information')),
                ('pastdecisions', models.BooleanField(blank=True, null=True)),
                ('aioutput', models.BooleanField(blank=True, null=True)),
                ('aistatus', models.IntegerField(blank=True, null=True)),
                ('aiconfidence', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('f1score', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('graphstatus', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'anomalylogsdetails',
                'ordering': ['causeeffect', 'userfeedback'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AnomalyParameters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uniqueid', models.TextField(blank=True, null=True)),
                ('logcode', models.TextField(blank=True, null=True)),
                ('anomalytype', models.IntegerField(blank=True, null=True)),
                ('credate', models.DateTimeField(blank=True, null=True)),
                ('locationgroupid', models.IntegerField(blank=True, null=True)),
                ('logevents', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), size=None)),
                ('logcredate', models.DateTimeField(blank=True, null=True)),
                ('logstartdate', models.DateTimeField(blank=True, null=True)),
                ('logenddate', models.DateTimeField(blank=True, null=True)),
                ('analyzedstatus', models.IntegerField(blank=True, null=True)),
                ('logtimeseries', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), size=None)),
                ('dateseries', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(blank=True, null=True), size=None)),
                ('intervalval', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'anomalyparameters',
                'ordering': ['-logcredate'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AnomalyParametersDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uniqueid', models.TextField(blank=True, null=True)),
                ('deviceip', models.TextField(blank=True, null=True, verbose_name='Network Device IP')),
                ('paramval', models.TextField(blank=True, null=True)),
                ('credate', models.DateTimeField(blank=True, null=True)),
                ('logdatestart', models.DateTimeField(blank=True, null=True)),
                ('logdateend', models.DateTimeField(blank=True, null=True)),
                ('paramseries', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True), size=None)),
                ('analyzedstatus', models.IntegerField(blank=True, null=True)),
                ('logtimes', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(blank=True, null=True), size=None)),
                ('paramfield', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'anomalyparametersdetails',
                'ordering': ['-credate'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Applications',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appname', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'applications',
                'ordering': ['-id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Components',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('componentname', models.TextField(blank=True, null=True)),
                ('applicationids', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True, unique=True), size=None)),
            ],
            options={
                'db_table': 'components',
                'ordering': ['-id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DeviceLogInterval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timeepoch', models.BigIntegerField(blank=True, null=True)),
                ('intervalval', models.IntegerField(blank=True, null=True)),
                ('uniqueid', models.TextField(blank=True, null=True)),
                ('timestart', models.DateTimeField(blank=True, null=True)),
                ('logcount', models.IntegerField(blank=True, null=True)),
                ('prediction', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('lowerbound', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('upperbound', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('modeltype', models.IntegerField(blank=True, null=True)),
                ('deviceip', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'deviceloginterval',
                'ordering': ['id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DeviceMac',
            fields=[
                ('uniqueid', models.TextField(blank=True, primary_key=True, serialize=False, unique=True)),
                ('orderpval', models.IntegerField(blank=True, null=True)),
                ('orderdval', models.IntegerField(blank=True, null=True)),
                ('orderqval', models.IntegerField(blank=True, null=True)),
                ('modeltype', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'devicemac',
                'ordering': ['uniqueid'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DeviceParserLogSeverity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codeseverity', models.TextField(blank=True, null=True)),
                ('systemseveritycode', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'deviceparserlogseverity',
                'ordering': ['systemseveritycode'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DeviceParserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parsername', models.TextField(blank=True, null=True)),
                ('alternateparseid', models.IntegerField(blank=True, null=True)),
                ('alternatecondition', models.TextField(blank=True, null=True)),
                ('parsestatus', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'deviceparserprofile',
                'ordering': ['-id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DeviceParserRules',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('varname', models.TextField(blank=True, null=True)),
                ('startpoint', models.TextField(blank=True, null=True)),
                ('charcount', models.TextField(blank=True, null=True)),
                ('vartype', models.TextField(blank=True, null=True)),
                ('varformat', models.TextField(blank=True, null=True)),
                ('staticval', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'deviceparserrules',
                'ordering': ['id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DeviceTypeList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('devicetype', models.TextField(blank=True, null=True)),
                ('devicetypecode', models.TextField(blank=True, null=True)),
                ('upversion', models.TextField(blank=True, null=True)),
                ('upsubversion', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'devicetypelist',
                'ordering': ['devicetype', 'upversion', 'upsubversion'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DeviceVersionParse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('versionparsename', models.TextField(blank=True, null=True)),
                ('parsestartdef', models.TextField(blank=True, null=True)),
                ('parselength', models.IntegerField(blank=True, null=True)),
                ('versionoid', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'deviceversionparse',
                'ordering': ['versionparsename'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EnterpriseModelOIDs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oid', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'enterprisemodeloids',
                'ordering': ['oid'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EnterpriseSnmpIds',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brandid', models.BigIntegerField(blank=True, null=True)),
                ('enterpriseid', models.IntegerField(blank=True, null=True, unique=True)),
            ],
            options={
                'db_table': 'enterprisesnmpids',
                'ordering': ['enterpriseid'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GeneralParameterDetail',
            fields=[
                ('kod', models.CharField(max_length=8)),
                ('kisakod', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('kisaack', models.CharField(blank=True, max_length=20, null=True)),
                ('ack', models.TextField(blank=True, null=True)),
                ('sira', models.IntegerField(blank=True, null=True)),
                ('aktifpasif', models.BooleanField(blank=True, null=True)),
                ('minvalue', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('maxvalue', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
            ],
            options={
                'db_table': 'genelparametredetay',
                'ordering': ['kisakod', 'kod', 'aktifpasif'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GeneralParameters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('aciklama', models.TextField(blank=True, null=True)),
                ('yetkirole', models.CharField(blank=True, max_length=5, null=True)),
            ],
            options={
                'db_table': 'genelparametreler',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='IngestionProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ingestionprofilename', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ingestionprofile',
                'ordering': ['id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Localization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('localekod', models.CharField(blank=True, max_length=6, null=True)),
                ('messagekod', models.CharField(blank=True, max_length=50, null=True)),
                ('messagelang', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'localizasyon',
                'ordering': ['localekod', 'messagelang'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LogCluster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clustertext', models.TextField(blank=True, null=True)),
                ('addedlogs', models.TextField(blank=True, null=True)),
                ('logpriority', models.TextField(blank=True, null=True)),
                ('logdefno', models.IntegerField(blank=True, null=True)),
                ('devoruserparse', models.TextField(blank=True, null=True)),
                ('parseformulcode', models.IntegerField(blank=True, null=True)),
                ('addedlognos', models.TextField(blank=True, null=True)),
                ('smlrrates', models.TextField(blank=True, null=True)),
                ('wordcnt', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'logcluster',
                'ordering': ['logpriority', 'logdefno', 'wordcnt'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LogDefinitionDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logcode', models.TextField(blank=True, null=True)),
                ('logstructs', models.TextField(blank=True, null=True)),
                ('logsarr', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), size=None)),
                ('outclasstype', models.TextField(blank=True, null=True)),
                ('logsubdefcode', models.IntegerField(blank=True, null=True)),
                ('logfields', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), size=None)),
                ('userdisabled', models.BooleanField(blank=True, null=True)),
                ('protocolrelation', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), size=None)),
                ('daemonrelation', models.TextField(blank=True, null=True)),
                ('paramsvalid', models.BooleanField(blank=True, null=True)),
                ('systemlogdef', models.BooleanField(blank=True, null=True)),
                ('logdefs', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(blank=True, null=True), size=None)),
                ('autoparam', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'logdefdetails',
                'ordering': ['outclasstype', 'logDefCode_id', 'logcode', 'logsubdefcode'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LogDefinitions',
            fields=[
                ('definitioncode', models.IntegerField(primary_key=True, serialize=False, unique=True, verbose_name='Log Definition Unique Code')),
                ('definitionname', models.TextField(blank=True, null=True, verbose_name='Log Definition Name')),
                ('logcodeaccept', models.TextField(blank=True, null=True, verbose_name='Log Accept Code')),
                ('shortcode', models.TextField(blank=True, null=True)),
                ('logcodedelete', models.TextField(blank=True, null=True, verbose_name='Log Delete Code')),
            ],
            options={
                'db_table': 'logdefinitions',
                'ordering': ['shortcode'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LogDeviceGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logno', models.TextField(blank=True, null=True)),
                ('uniqueid', models.TextField(blank=True, null=True)),
                ('modeltype', models.IntegerField(blank=True, null=True)),
                ('orderdval', models.IntegerField(blank=True, null=True)),
                ('orderpval', models.IntegerField(blank=True, null=True)),
                ('orderqval', models.IntegerField(blank=True, null=True)),
                ('loggroupinterval', models.IntegerField(blank=True, null=True)),
                ('statusactive', models.BooleanField(blank=True, null=True)),
                ('kdezero', models.TextField(blank=True, null=True)),
                ('kdenonzero', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'logdevicegroup',
                'ordering': ['uniqueid'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LogDeviceParameters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uniqueid', models.TextField(blank=True, null=True)),
                ('parametername', models.TextField(blank=True, null=True)),
                ('modeltype', models.IntegerField(blank=True, null=True)),
                ('orderdval', models.IntegerField(blank=True, null=True)),
                ('orderpval', models.IntegerField(blank=True, null=True)),
                ('orderqval', models.IntegerField(blank=True, null=True)),
                ('loggroupinterval', models.IntegerField(blank=True, null=True)),
                ('statusactive', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'logdeviceparameter',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LogInterval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logdevicegroupid', models.BigIntegerField(blank=True, null=True)),
                ('timeepoch', models.BigIntegerField(blank=True, null=True)),
                ('intervalval', models.IntegerField(blank=True, null=True)),
                ('timestart', models.DateTimeField(blank=True, null=True)),
                ('logcount', models.IntegerField(blank=True, null=True)),
                ('prediction', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('lowerbound', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('upperbound', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('modeltype', models.IntegerField(blank=True, null=True)),
                ('kdezero', models.TextField(blank=True, null=True)),
                ('kdenonzero', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'loginterval',
                'ordering': ['id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LogParameterValues',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logdefcode', models.IntegerField(blank=True, null=True)),
                ('logcode', models.TextField(blank=True, null=True)),
                ('logsubdefcode', models.IntegerField(blank=True, null=True)),
                ('logfieldsid', models.IntegerField(blank=True, null=True)),
                ('paramvals', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'logparamvals',
                'ordering': ['logdefcode', 'logcode'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LogRules',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('startpoint', models.TextField(blank=True, db_column='basla', null=True)),
                ('charcount', models.TextField(blank=True, db_column='karaktersay', null=True)),
                ('vartype', models.CharField(blank=True, db_column='tur', max_length=40, null=True)),
                ('varformat', models.CharField(blank=True, db_column='format', max_length=40, null=True)),
                ('varname', models.CharField(blank=True, db_column='degisken', max_length=40, null=True)),
                ('staticval', models.CharField(blank=True, max_length=40, null=True)),
            ],
            options={
                'db_table': 'logkural',
                'ordering': ['parserProfile_id', 'varname', 'vartype'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Logs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('socketaddress', models.TextField(blank=True, null=True)),
                ('inetaddress', models.TextField(blank=True, null=True)),
                ('logdata', models.TextField(blank=True, null=True)),
                ('port', models.CharField(blank=True, max_length=50, null=True)),
                ('olusturmatarih', models.DateTimeField(blank=True, null=True)),
                ('durum', models.BooleanField(blank=True, null=True)),
                ('logid', models.CharField(blank=True, max_length=40, null=True)),
                ('logdate', models.DateTimeField(blank=True, null=True)),
                ('devicename', models.TextField(blank=True, max_length=50, null=True)),
                ('logserviceno', models.TextField(blank=True, null=True)),
                ('severity', models.CharField(blank=True, max_length=40, null=True)),
                ('logevent', models.TextField(blank=True, null=True)),
                ('logno', models.TextField(blank=True, null=True)),
                ('logservice', models.TextField(blank=True, null=True)),
                ('classificationgroup', models.TextField(blank=True, null=True)),
                ('recstatus', models.SmallIntegerField(blank=True, null=True)),
                ('logjson', models.TextField(blank=True, null=True)),
                ('recerror', models.TextField(blank=True, null=True)),
                ('tryjson', models.IntegerField(blank=True, null=True)),
                ('mappedlogsource', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'loglar',
                'ordering': ['-olusturmatarih', '-id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LogSeverityTypes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parseformulacode', models.IntegerField(blank=True, null=True)),
                ('parsecodeseverity', models.TextField(blank=True, null=True)),
                ('systemseveritycode', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'logseveritytypes',
                'ordering': ['parseformulacode', 'parsecodeseverity', 'systemseveritycode'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LogSources',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sourcename', models.TextField(blank=True, null=True)),
                ('uniqueid', models.TextField(blank=True, null=True, unique=True)),
                ('ipaddress', models.TextField(blank=True, null=True)),
                ('macaddress', models.TextField(blank=True, null=True)),
                ('hostname', models.TextField(blank=True, null=True)),
                ('customname', models.TextField(blank=True, null=True)),
                ('connectedmac', models.TextField(blank=True, null=True)),
                ('devicetype', models.TextField(blank=True, null=True)),
                ('status', models.TextField(blank=True, null=True)),
                ('errorstatus', models.TextField(blank=True, null=True)),
                ('uniqueidtype', models.TextField(blank=True, null=True)),
                ('monitorprofile', models.IntegerField(blank=True, null=True)),
                ('parserprofile', models.IntegerField(blank=True, null=True)),
                ('locationprofile', models.IntegerField(blank=True, null=True)),
                ('ingestionprofile', models.IntegerField(blank=True, null=True)),
                ('markid', models.BigIntegerField(blank=True, null=True)),
                ('modelid', models.BigIntegerField(blank=True, null=True)),
                ('deviceverid', models.IntegerField(blank=True, null=True)),
                ('creationdate', models.DateTimeField(blank=True, null=True)),
                ('updatedate', models.DateTimeField(blank=True, null=True)),
                ('virtualdeviceip', models.TextField(blank=True, null=True)),
                ('devicenote', models.TextField(blank=True, null=True)),
                ('snmpstatus', models.BooleanField(default=True)),
                ('scanstatus', models.SmallIntegerField(blank=True, default=0, null=True)),
                ('manuallyadded', models.BooleanField(default=True)),
                ('logsourceselection', models.TextField(blank=True, null=True)),
                ('syslogtag', models.TextField(blank=True, default='')),
                ('taglocation', models.TextField(blank=True, default='')),
                ('facility', models.TextField(blank=True, null=True)),
                ('sysuptime', models.TextField(blank=True, null=True)),
                ('syscontact', models.TextField(blank=True, null=True)),
                ('syslocation', models.TextField(blank=True, null=True)),
                ('sysservices', models.TextField(blank=True, null=True)),
                ('componentids', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, null=True, unique=True), size=None)),
            ],
            options={
                'db_table': 'logsources',
                'ordering': ['id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mib',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oib', models.CharField(blank=True, max_length=40, null=True)),
                ('oibaciklama', models.TextField(blank=True, null=True)),
                ('grup', models.CharField(blank=True, max_length=10, null=True)),
                ('durum', models.BooleanField(blank=True, null=True)),
                ('degisken', models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                'db_table': 'mib',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MonitorProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monitorprofilename', models.TextField(blank=True, null=True)),
                ('monitorprofiletype', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'monitorprofile',
                'ordering': ['id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MonitorProfileDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paramsname', models.TextField(blank=True, null=True)),
                ('querytosend', models.TextField(blank=True, null=True)),
                ('responsetoreceive', models.TextField(blank=True, null=True)),
                ('responsetodown', models.TextField(blank=True, null=True)),
                ('communitystring', models.TextField(blank=True, null=True)),
                ('snmpv3user', models.TextField(blank=True, null=True)),
                ('snmpv3authpass', models.TextField(blank=True, null=True)),
                ('snmpv3authprotocol', models.TextField(blank=True, null=True)),
                ('snmpv3privacypass', models.TextField(blank=True, null=True)),
                ('snmpv3privacyprotocol', models.TextField(blank=True, null=True)),
                ('snmpversion', models.TextField(blank=True, null=True)),
                ('httpmethod', models.TextField(blank=True, null=True)),
                ('httpurl', models.TextField(blank=True, null=True)),
                ('httpuri', models.TextField(blank=True, null=True)),
                ('httpsecure', models.BooleanField(blank=True, null=True)),
                ('httpport', models.IntegerField(blank=True, null=True)),
                ('username', models.TextField(blank=True, null=True)),
                ('userpass', models.TextField(blank=True, null=True)),
                ('dbasename', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'monitorprofdetails',
                'ordering': ['id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='NetworkParameters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('networkname', models.TextField(blank=True, null=True, unique=True)),
                ('ipaddress', models.TextField(blank=True, null=True)),
                ('subnetmask', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'networkparameters',
                'ordering': ['-id', 'networkname', 'ipaddress'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='NewBehaviors',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uniqueid', models.CharField(blank=True, max_length=40, null=True)),
                ('deviceip', models.CharField(blank=True, max_length=40, null=True)),
                ('logdefcode', models.IntegerField(blank=True, null=True)),
                ('logcode', models.TextField(blank=True, null=True)),
                ('lastlogtime', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'newbehaviors',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ParameterInterval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parameterdevicegroupid', models.BigIntegerField(verbose_name='')),
                ('timeepoch', models.BigIntegerField(blank=True, null=True)),
                ('intervalval', models.IntegerField(blank=True, null=True)),
                ('timestart', models.DateTimeField(blank=True, null=True)),
                ('logcount', models.IntegerField(blank=True, null=True)),
                ('prediction', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('lowerbound', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('upperbound', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('modeltype', models.IntegerField(blank=True, null=True)),
                ('kdezero', models.TextField(blank=True, null=True)),
                ('kdenonzero', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'parameterinterval',
                'ordering': ['id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PParseFormulaCode',
            fields=[
                ('id', models.IntegerField(db_column='parseformulkod', primary_key=True, serialize=False)),
                ('parsername', models.TextField(blank=True, db_column='formulname', null=True)),
                ('alternateparseid', models.IntegerField(blank=True, null=True)),
                ('alternatecondition', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'pparseformulkod',
                'ordering': ['-id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RootCauseGraphsDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rootlist', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(blank=True, null=True), size=None)),
                ('nodelist', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(blank=True, null=True), size=None)),
                ('leaflist', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(blank=True, null=True), size=None)),
                ('rcgraph', models.TextField(blank=True, null=True)),
                ('analyzedstatus', models.IntegerField(blank=True, null=True)),
                ('graphupdatetime', models.DateTimeField(blank=True, null=True)),
                ('graphpaths', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'rcgraphsdetails',
                'ordering': ['-id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ScanParameters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paramsname', models.TextField(blank=True, null=True)),
                ('communitystring', models.TextField(blank=True, null=True)),
                ('snmpv3user', models.TextField(blank=True, null=True)),
                ('snmpv3authpass', models.TextField(blank=True, null=True)),
                ('snmpv3authprotocol', models.TextField(blank=True, null=True)),
                ('snmpv3privacypass', models.TextField(blank=True, null=True)),
                ('snmpv3privacyprotocol', models.TextField(blank=True, null=True)),
                ('snmpversion', models.TextField(blank=True, null=True)),
                ('versionoid', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'scanparameters',
                'ordering': ['id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ServiceDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('servicetype', models.CharField(blank=True, max_length=6, null=True, unique=True, verbose_name='Device Service Type')),
                ('serveripaddress', models.TextField(blank=True, null=True, unique=True, verbose_name='Server Ip Address')),
                ('domainname', models.TextField(blank=True, null=True, verbose_name='Server Domain Name')),
                ('macaddress', models.TextField(blank=True, null=True, verbose_name='Device MAC Address')),
                ('modeltype', models.IntegerField(blank=True, null=True)),
                ('orderpval', models.IntegerField(blank=True, null=True)),
                ('orderdval', models.IntegerField(blank=True, null=True)),
                ('orderqval', models.IntegerField(blank=True, null=True)),
                ('authtype', models.TextField(blank=True, null=True)),
                ('servicestatus', models.CharField(blank=True, max_length=3, null=True, verbose_name='Service Status')),
            ],
            options={
                'db_table': 'servicedevice',
                'ordering': ['servicetype', 'serveripaddress', 'modeltype'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ServiceDeviceDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raduser', models.TextField(blank=True, null=True)),
                ('radpass', models.TextField(blank=True, null=True)),
                ('radmethod', models.TextField(blank=True, null=True)),
                ('modeltype', models.IntegerField(blank=True, null=True)),
                ('orderpval', models.IntegerField(blank=True, null=True)),
                ('orderdval', models.IntegerField(blank=True, null=True)),
                ('orderqval', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'servicedevicedetails',
                'ordering': ['modeltype'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ServiceLogInterval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timeepoch', models.BigIntegerField(blank=True, null=True)),
                ('intervalval', models.IntegerField(blank=True, null=True)),
                ('macaddress', models.TextField(blank=True, null=True)),
                ('timestart', models.DateTimeField(blank=True, null=True)),
                ('servicetime', models.IntegerField(blank=True, null=True)),
                ('prediction', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('lowerbound', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('upperbound', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('modeltype', models.IntegerField(blank=True, null=True)),
                ('deviceip', models.TextField(blank=True, null=True)),
                ('servauthtype', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'serviceloginterval',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SystemLogFacilities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('facilitykeyword', models.TextField(blank=True, null=True)),
                ('facilityname', models.TextField(blank=True, null=True)),
                ('status', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'db_table': 'syslogfacilities',
                'ordering': ['id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SystemParameters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loglifetime', models.IntegerField(blank=True, null=True, verbose_name='Storage Time of a Log in ATIBA (DAYS)')),
                ('newbehaviortime', models.IntegerField(blank=True, null=True, verbose_name='New Behaviour Time (DAYS)')),
                ('timeseriesinterval', models.IntegerField(blank=True, null=True, verbose_name='Interval of Time Series (MINUTES)')),
                ('dnsinterval', models.IntegerField(blank=True, null=True)),
                ('dhcpinterval', models.IntegerField(blank=True, null=True)),
                ('radiusinterval', models.IntegerField(blank=True, null=True)),
                ('fromuser', models.TextField(blank=True, null=True)),
                ('frompass', models.TextField(blank=True, null=True)),
                ('pop3', models.TextField(blank=True, null=True)),
                ('emailtype', models.TextField(blank=True, null=True)),
                ('sslport', models.IntegerField(blank=True, null=True)),
                ('auth', models.BooleanField(blank=True, null=True)),
                ('emailhost', models.TextField(blank=True, null=True)),
                ('starttls', models.BooleanField(blank=True, null=True)),
                ('smtpport', models.IntegerField(blank=True, null=True)),
                ('devmacaddress', models.TextField(blank=True, null=True)),
                ('snmpcontrollerinterval', models.IntegerField(blank=True, null=True)),
                ('ssl', models.BooleanField(blank=True, null=True)),
                ('fallback', models.BooleanField(blank=True, null=True)),
                ('systemip', models.TextField(blank=True, null=True)),
                ('atibaver', models.TextField(blank=True, null=True)),
                ('atibasubver', models.IntegerField(blank=True, null=True)),
                ('syslogpriorities', django.contrib.postgres.fields.ArrayField(base_field=models.BooleanField(blank=True, null=True, verbose_name='System Log Priorities'), size=None)),
            ],
            options={
                'db_table': 'systemparameters',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SystemSeverities',
            fields=[
                ('severitycode', models.TextField(primary_key=True, serialize=False)),
                ('severitydef', models.TextField(blank=True, null=True)),
                ('anomalyvalue', models.IntegerField(blank=True, null=True)),
                ('severitylevel', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'systemseverities',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UpdateStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uploadtype', models.TextField(blank=True, null=True)),
                ('upversion', models.TextField(blank=True, null=True)),
                ('upsubversion', models.IntegerField(blank=True, null=True)),
                ('cmdtitle', models.TextField(blank=True, null=True)),
                ('cmd', models.TextField(blank=True, null=True)),
                ('ifsuccess', models.BooleanField(blank=True, null=True)),
                ('errorinfo', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'updatestatus',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserMetricDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('applicationgroup', models.IntegerField(blank=True, null=True)),
                ('applicationid', models.IntegerField(blank=True, null=True)),
                ('devicemac', models.TextField(blank=True, null=True)),
                ('devicetype', models.TextField(blank=True, null=True)),
                ('devicetypecode', models.TextField(blank=True, null=True)),
                ('definitionname', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'usermetricdefinition',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserMetricGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metricdefinition', models.TextField(blank=True, null=True)),
                ('recalcmodel', models.BooleanField(blank=True, null=True)),
                ('modeltype', models.IntegerField(blank=True, null=True)),
                ('orderdval', models.IntegerField(blank=True, null=True)),
                ('orderpval', models.IntegerField(blank=True, null=True)),
                ('orderqval', models.IntegerField(blank=True, null=True)),
                ('metricinterval', models.IntegerField(blank=True, null=True)),
                ('statusactive', models.BooleanField(blank=True, null=True)),
                ('metricval', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'usermetricgroup',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserMetricInterval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timeepoch', models.BigIntegerField(blank=True, null=True)),
                ('intervalval', models.IntegerField(blank=True, null=True)),
                ('timestart', models.DateTimeField(blank=True, null=True)),
                ('logcount', models.IntegerField(blank=True, null=True)),
                ('prediction', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('lowerbound', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('upperbound', models.DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('modeltype', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'usermetricinterval',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VirtualDeviceParameters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('devicetype', models.TextField(blank=True, null=True)),
                ('firstoidpart', models.TextField(blank=True, null=True)),
                ('lastoidpart', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'virtualdeviceparams',
                'ordering': ['devicetype', 'firstoidpart', 'lastoidpart'],
                'managed': False,
            },
        ),
        migrations.AlterModelOptions(
            name='deviceconfigprofile',
            options={'managed': False, 'ordering': ['configcode']},
        ),
        migrations.AlterModelOptions(
            name='devicemark',
            options={'managed': False, 'ordering': ['markname']},
        ),
        migrations.AlterModelOptions(
            name='devicemodel',
            options={'managed': False, 'ordering': ['modelname', 'devicetype']},
        ),
        migrations.AlterModelOptions(
            name='devicepasswordprofiles',
            options={'managed': False, 'ordering': ['passprofilecode']},
        ),
        migrations.AlterModelOptions(
            name='deviceprofilegroups',
            options={'managed': False, 'ordering': ['groupname', 'locationGroup_id']},
        ),
        migrations.AlterModelOptions(
            name='deviceversions',
            options={'managed': False, 'ordering': ['versioncode', 'devicetype']},
        ),
        migrations.AlterModelOptions(
            name='devlocationgroup',
            options={'managed': False, 'ordering': ['locationgroupcode']},
        ),
        migrations.AlterModelOptions(
            name='devlocations',
            options={'managed': False, 'ordering': ['locationcode']},
        ),
        migrations.AlterModelOptions(
            name='networkdevice',
            options={'managed': False, 'ordering': ['id']},
        ),
        migrations.AlterModelOptions(
            name='versionconfigs',
            options={'managed': False, 'ordering': ['configcode']},
        ),
    ]
